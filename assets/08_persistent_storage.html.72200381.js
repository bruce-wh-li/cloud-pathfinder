import { c as createStaticVNode } from "./app.32c85e0d.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.21dcd24c.js";
var _imports_0 = "/cloud-pathfinder/assets/06_persistent_storage_01.38c1c211.png";
var _imports_1 = "/cloud-pathfinder/assets/06_persistent_storage_02.f96eae85.png";
var _imports_2 = "/cloud-pathfinder/assets/06_persistent_storage_03.b3df3267.png";
var _imports_3 = "/cloud-pathfinder/assets/06_persistent_storage_04a.2eed33af.png";
var _imports_4 = "/cloud-pathfinder/assets/06_persistent_storage_04b.c83eb52f.png";
var _imports_5 = "/cloud-pathfinder/assets/06_persistent_storage_07.4ac0e027.png";
var _imports_6 = "/cloud-pathfinder/assets/06_persistent_storage_08.6d2ea357.png";
var _imports_7 = "/cloud-pathfinder/assets/06_persistent_storage_09.c41c9434.png";
var _imports_8 = "/cloud-pathfinder/assets/06_persistent_storage_10.ec59d28f.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="persistent-storage" tabindex="-1"><a class="header-anchor" href="#persistent-storage" aria-hidden="true">#</a> Persistent Storage</h1><p>Up to this point you have leveraged a single mongodb pod with ephemeral storage. In order to maintain the application data, persistent storage is required.</p><ul><li>Let&#39;s first take a look at our application prior to this lab <img src="' + _imports_0 + '" alt=""></li></ul><h3 id="deleting-pods-with-ephemeral-storage" tabindex="-1"><a class="header-anchor" href="#deleting-pods-with-ephemeral-storage" aria-hidden="true">#</a> Deleting Pods with Ephemeral Storage</h3><p><strong>Objective</strong>: Observe that by using ephemeral storage causes RocketChat to lose any previous data or configuration after a redeployment.</p><p>To understand what will happen when a pod with ephemeral storage is removed,</p><ul><li>Scale down both the rocketchat and mongo applications to 0 pods<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Scale back up each application pod to 1 replica<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p><img src="' + _imports_1 + '" alt=""></p><h3 id="adding-storage-to-existing-deployment-configurations" tabindex="-1"><a class="header-anchor" href="#adding-storage-to-existing-deployment-configurations" aria-hidden="true">#</a> Adding Storage to Existing Deployment Configurations</h3><p><strong>Objective</strong>: Add persistent storage to MongoDB so that it won&#39;t lose data created by RocketChat.</p><p>Now that we notice all messages and configuration is gone whenever pods cycle, let&#39;s add persistent storage to the mongodb pod.</p><ul><li><p>Scale down both the rocketchat and mongo applications to 0 pods</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Remove the emptyDir Storage by navigating to the mongodb deploymentconfig <img src="' + _imports_2 + '" alt=""></p></li><li><p>Add a new volume by navigating to <code>Administrator -&gt; Storage -&gt; Persitant Volume Claims -&gt; Create Persistant Volume Claims</code> and name it <code>mongodb-[username]-file</code></p></li></ul><p><img src="' + _imports_3 + '" alt=""></p><ul><li><p>Select the <code>managed-premium</code> storage class. Set the type to RWO, the size to 1GB, and name it <code>mongodb-[username]-file</code></p></li><li><p>Navigate back to your Mongo DeploymentConfig and select <code>Add Storage</code> from the <code>Actions</code> Tab</p></li><li><p>The mount path is <code>/var/lib/mongodb/data</code><img src="' + _imports_4 + '" alt=""></p></li></ul><blockquote><p>PLEASE NOTE: The storage classes you are interacting with are specific to this Azure-based Openshift Cluster. The production Openshift Cluster utilizes different storage classes. From an application perspective that are slight differences in performance typically but the implementation remains the same.</p></blockquote><ul><li>Scale up <code>mongodb-[username]</code> instance to 1 pod<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>When mongo is running, scale <code>rocketchat-[username]</code> to 1 pod<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Access the RocketChat URL and complete the Setup Wizard again</li><li>Scale down and scale back up both the database and the rocketchat app<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">0</span>\n<span class="token comment"># Scale up MongoDB to 1 replica; and</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">1</span>\n<span class="token comment"># Scale up RocketChat to 1 replica</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>Verify that data was persisted by accessing RocketChat URL and observing that it doesn&#39;t show the Setup Wizard.</li></ul><h4 id="rwo-storage" tabindex="-1"><a class="header-anchor" href="#rwo-storage" aria-hidden="true">#</a> RWO Storage</h4><p>RWO Storage is analagous to attaching a physical disk to a pod. For this reason, RWO storage <strong>cannot be mounted to more than 1 pod at the same time</strong>.</p><p><strong>Objective</strong>: Cause deployment error by using the wrong deployment strategy for the storage class.</p><p>RWO storage (which was selected above) can only be attached to a single pod at a time, which causes issues in certain deployment strategies.</p><ul><li>Ensure your <code>mongodb-[username]</code> deployment strategy is set to `Rolling and then trigger a redeployment.</li></ul><p><img src="' + _imports_5 + '" alt=""></p><ul><li>Notice and investigate the issue</li></ul><blockquote><p>rolling deployments will start up a new version of your application pod before killing the previous one. There is a brief moment where two pods for the mongo application exist at the same time. Because the storage type is <strong>RWO</strong> it is unable to mount to two pods at the same time. This will cause the rolling deployment to hang and eventually time out.</p></blockquote><p><img src="' + _imports_6 + '" alt=""></p><ul><li>Switch to recreate</li></ul><h3 id="rwx-storage" tabindex="-1"><a class="header-anchor" href="#rwx-storage" aria-hidden="true">#</a> RWX Storage</h3><p><strong>Objective</strong>: Cause MongoDB to corrupt its data file by using the wrong storage class for MongoDB.</p><p>RWX storage allows multiple pods to access the same PV at the same time.</p><ul><li>Scale down <code>mongodb-[username]</code> to 0 pods<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p><img src="' + _imports_7 + '" alt=""></p><ul><li><p>Remove the previous storage volume and recreate as <code>managed-premium</code> (mounting at <code>/var/lib/mongodb/data</code>) with type RWX, and naming it <code>mongodb-[username]-file-rwx</code></p><p><img src="' + _imports_8 + '" alt=""></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout pause dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> \n<span class="token comment"># Remove all volumes</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> get dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> -o <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{.spec.template.spec.volumes[].name}{&quot;\\n&quot;}&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> <span class="token builtin class-name">set</span> volumes dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --remove <span class="token string">&#39;--name={}&#39;</span>\n\n<span class="token comment"># Add a new volume by creating a PVC. If the PVC already exists, omit &#39;--claim-class&#39;, &#39;--claim-mode&#39;, and &#39;--claim-size&#39; arguments</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> <span class="token builtin class-name">set</span> volume dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --add --name<span class="token operator">=</span>mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-data -m /var/lib/mongodb/data -t pvc --claim-name<span class="token operator">=</span>mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-file --claim-class<span class="token operator">=</span>managed-premium --claim-mode<span class="token operator">=</span>ReadWriteMany --claim-size<span class="token operator">=</span>1G\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>Scale up <code>mongodb-[username]</code> to 1 pods</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Redeploy with Rolling deployment</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># you can resume rollout; or</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout resume dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout latest dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="fixing-it" tabindex="-1"><a class="header-anchor" href="#fixing-it" aria-hidden="true">#</a> Fixing it</h3><p><strong>Objective</strong>: Fix corrupted MongoDB storage by using the correct storage class for MongoDB.</p><p>After using the <code>azure-file</code> storage class (RWX) with rolling deployment, you got to a point where your mongodb is now corrupted. That happens because MongoDB does NOT support multiple processes/pods reading/writing to the same location/mount (<code>/var/lib/mongodb/data</code>) of single/shared pvc.</p><p>To fix that we will need to replace the <code>RWX</code> PVC with a <code>RWO</code> PVC and change the deployment strategy from <code>Rolling</code> to <code>Recreate</code> as follow:</p><ul><li>Scale down <code>rocketchat-[username]</code> to 0 pods<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Scale down <code>mongodb-[username]</code> to 0 pods<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Go to the <code>mongodb-[username]</code> DeploymentConfig and <code>Pause Rollouts</code> (under <code>Actions</code> menu on the top right side)<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>  oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout pause dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Remove all existing volumes on <code>mongodb-[username]</code><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Remove all volumes</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> get dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> -o <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{.spec.template.spec.volumes[].name}{&quot;\\n&quot;}&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> <span class="token builtin class-name">set</span> volumes dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --remove <span class="token string">&#39;--name={}&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li>Attach a new volume using the existing <code>mongodb-[username]-file</code> PVC<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> <span class="token builtin class-name">set</span> volume dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --add --name<span class="token operator">=</span>mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-data -m /var/lib/mongodb/data -t pvc --claim-name<span class="token operator">=</span>mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-file\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Change the deployment strategy to use <code>Recreate</code> deployment strategy<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> patch dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> -p <span class="token string">&#39;{&quot;spec&quot;:{&quot;strategy&quot;:{&quot;activeDeadlineSeconds&quot;:21600,&quot;recreateParams&quot;:{&quot;timeoutSeconds&quot;:600},&quot;resources&quot;:{},&quot;type&quot;:&quot;Recreate&quot;}}}&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Go to the <code>mongodb-[username]</code> DeploymentConfig and <code>Resume Rollouts</code> (under <code>Actions</code> menu on the top right side)<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout resume dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Check if a new deployment is being rollout. If not, please do a manual deployment by clicking on <code>Deploy</code><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>  oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout latest dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Scale up <code>mongodb-[username]</code> to 1 pod, and wait for the pod to become ready<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Scale up <code>rocketchat-[username]</code> to 1 pod, and wait for the pod to become ready<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Check deployment and make sure <code>mongodb-[username]-file-rwx</code> PVCs are not being used, and delete those PVCs.<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> delete pvc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-file-rwx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul>', 37);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var _08_persistent_storage_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _08_persistent_storage_html as default };
