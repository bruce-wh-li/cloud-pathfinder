import { c as createStaticVNode } from "./app.32c85e0d.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.21dcd24c.js";
var _imports_0 = "/cloud-pathfinder/assets/09_debugging_00.58d64180.png";
var _imports_1 = "/cloud-pathfinder/assets/09_debugging_01.78b1c233.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="debugging-containers" tabindex="-1"><a class="header-anchor" href="#debugging-containers" aria-hidden="true">#</a> Debugging Containers</h1><h3 id="accessing-local-logs" tabindex="-1"><a class="header-anchor" href="#accessing-local-logs" aria-hidden="true">#</a> Accessing Local Logs</h3><p>Logs of a running pod can be accessed from the Web Console or from the <code>oc</code> cli:</p><ul><li>The <code>Logs</code> tab of any running pod can be used to view active logs for the current pod</li></ul><p><img src="' + _imports_0 + '" alt=""></p><ul><li>The <code>oc</code> command can be used to view or tail the logs:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> logs -f <span class="token operator">&lt;</span>pod name<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>If there is more than one container in a given pod, the <code>-c &lt;container-name&gt;</code> switch is used to specify the desired container logs.</p><h3 id="using-a-debug-container" tabindex="-1"><a class="header-anchor" href="#using-a-debug-container" aria-hidden="true">#</a> Using a Debug Container</h3><p><strong>Objective</strong>: Create some error on app pod to start debugging: In this lab, we will scale down the database deployment so that application pods will experience errors and crash.</p><ul><li>Scale down database:<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> scale dc/mongodb-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --replicas<span class="token operator">=</span><span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Restart rocketchat:<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout restart deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Once the new pod starts, notice the CrashLoopBackOff</li></ul><p><img src="' + _imports_1 + '" alt=""></p><h4 id="using-the-oc-command-to-start-a-debug-container" tabindex="-1"><a class="header-anchor" href="#using-the-oc-command-to-start-a-debug-container" aria-hidden="true">#</a> Using the <code>oc</code> command to start a debug container</h4><ul><li>Find the name of a pod you would like to debug<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> pods\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>Run the <code>oc debug</code> command to start a debug pod (your output will vary)<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> debug <span class="token operator">&lt;</span>rocketchat-pod-name<span class="token operator">&gt;</span>\nDefaulting container name to rocketchat-shelly.\nUse <span class="token string">&#39;oc describe pod/rocketchat-shelly-6-bm827-debug -n ocp101-june-dev&#39;</span> to see all of the containers <span class="token keyword">in</span> this pod.\n\nDebugging with pod/rocketchat-shelly-6-bm827-debug, original command: container-entrypoint <span class="token function">node</span> main.js\nWaiting <span class="token keyword">for</span> pod to start <span class="token punctuation">..</span>.\nIf you don&#39;t see a <span class="token builtin class-name">command</span> prompt, try pressing enter.\nsh-4.2$ \nsh-4.2$ \nsh-4.2$ <span class="token builtin class-name">exit</span>\n<span class="token builtin class-name">exit</span>\n\nRemoving debug pod <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h3 id="rsh-and-rsync" tabindex="-1"><a class="header-anchor" href="#rsh-and-rsync" aria-hidden="true">#</a> RSH and RSYNC</h3><p>RSH is available to all normal pods through the web console under the <code>Terminal</code> tab, as well as through the <code>oc rsh</code> command.</p><ul><li>With your choice of access, rsh into one of the application pods and test access within the namespace <ul><li>cURL internal and external resources</li><li>Test internal name resolution, external name resolution, etc.</li><li>Explore your userid</li></ul></li></ul><p>RSYNC is also available in many pods, available through the <code>oc rsync</code> command.</p><ul><li>On the CLI, type <code>oc rsync -h</code></li><li>Using this command, copy the contents of the mongo data directory to your local machine, or from your machine to the remote pod</li></ul><h3 id="port-forwarding" tabindex="-1"><a class="header-anchor" href="#port-forwarding" aria-hidden="true">#</a> Port Forwarding</h3><p>The <code>oc port-forward</code> command enables users to forward remote ports running in the cluster into a local development machine.</p><ul><li>Find your pod and use the port forward command</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> get pods  <span class="token operator">|</span> <span class="token function">grep</span> rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> port-forward <span class="token punctuation">[</span>pod name from above<span class="token punctuation">]</span> <span class="token number">8000</span>:3000\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Navigate to http://127.0.0.1:8000</li></ul>', 24);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var _11_debugging_containers_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _11_debugging_containers_html as default };
