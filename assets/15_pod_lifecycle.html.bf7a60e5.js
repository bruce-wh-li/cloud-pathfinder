import { c as createStaticVNode } from "./app.32c85e0d.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.21dcd24c.js";
var _imports_0 = "/cloud-pathfinder/assets/12_pod_lifecycle_01.593aced3.png";
var _imports_1 = "/cloud-pathfinder/assets/12_pod_lifecycle_02.540bee29.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="pod-lifecycle" tabindex="-1"><a class="header-anchor" href="#pod-lifecycle" aria-hidden="true">#</a> Pod Lifecycle</h1><p>A Pod can be extended beyond the normal operation of the container by allowing developers to:</p><ul><li>add <code>init</code> containers</li><li>add <code>pre</code> and <code>post</code> lifecycle hooks</li><li>modify the default <code>entrypoint</code> of a container</li></ul><h2 id="init-containers" tabindex="-1"><a class="header-anchor" href="#init-containers" aria-hidden="true">#</a> Init Containers</h2><p>Init containers are best used to prepare the pod for normal operation. In this lab, you will add a simple init container that posts a message to rocketchat with your pod hostname.</p><p><strong>Objective</strong>: Create an init container</p><ul><li>From the Web Console, navigate to <code>Topology</code> and select your <code>rocketchat-[username]</code> deploymentconfig.</li><li>Navigate to the <strong>YAML</strong> tab. <blockquote><p>If you wish to perform this from the cli with the <code>oc</code> tool, type <code>oc edit deployment/rocketchat-[username]</code></p></blockquote></li></ul><p><img src="' + _imports_0 + '" alt=""></p><ul><li>Add the following section of code under <code>spec: -&gt; template: -&gt; spec:</code></li></ul><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init\n        <span class="token key atrule">image</span><span class="token punctuation">:</span> giantswarm/tiny<span class="token punctuation">-</span>tools\n        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c=$(curl -X POST -H &#39;Content-Type: application/json&#39; --data &#39;{\\&quot;text\\&quot;:\\&quot;Say Hello\\&quot;}&#39; https://chat.pathfinder.gov.bc.ca/hooks/xxx/xxx)&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Select Save</li><li>Ask the instructor to ensure the rocketchat instance is displayed to the class</li><li>Explore the <code>Pod Details</code> to notice the differente with the Init Container</li></ul><p><img src="' + _imports_1 + '" alt=""></p><p>In order to obtain logs from the init container, the <code>oc</code> command can be used by specifying <code>-c init</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>oc -n [-dev] logs rocketchat-[username]-[pod-id] -c init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="lifecycle-hooks" tabindex="-1"><a class="header-anchor" href="#lifecycle-hooks" aria-hidden="true">#</a> Lifecycle Hooks</h2><p>Lifecycle hooks can be configured to start and stop a container properly. The lifecycle hook is tied directly to each container. Add a similar pre and post hook as the <code>initContainer</code> to demonstrate when it executes in your rocketchat deployment.</p><ul><li>From the Web Console, navigate to the <code>rocketchat-[username]</code> deploymentconfig and click on <code>YAML</code> tab <ul><li>If you wish to perform this from the cli with the <code>oc</code> tool, type <code>oc edit deployment/rocketchat-[username]</code></li></ul></li><li>Add the following section of code under <code>spec: -&gt; template: -&gt; spec: -&gt; containers</code></li></ul><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>          <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>\n            <span class="token key atrule">postStart</span><span class="token punctuation">:</span>\n              <span class="token key atrule">exec</span><span class="token punctuation">:</span>\n                <span class="token key atrule">command</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c=$(curl -X POST -H &#39;Content-Type: application/json&#39; --data &#39;{\\&quot;text\\&quot;: \\&quot;&#39;\\&quot;$HOSTNAME\\&quot;&#39; is at the postStart phase, huzzah! \\&quot;}&#39; https://chat.pathfinder.gov.bc.ca/hooks/xxx/xxx)&quot;</span><span class="token punctuation">]</span>\n            <span class="token key atrule">preStop</span><span class="token punctuation">:</span>\n              <span class="token key atrule">exec</span><span class="token punctuation">:</span>\n                <span class="token key atrule">command</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c=$(curl -X POST -H &#39;Content-Type: application/json&#39; --data &#39;{\\&quot;text\\&quot;: \\&quot;&#39;\\&quot;$HOSTNAME\\&quot;&#39; is just about to STOPPPPPP! \\&quot;}&#39; https://chat.pathfinder.gov.bc.ca/hooks/xxx/xxx)&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>Select Save</li><li>Ask the instructor to ensure the rocketchat instance is displayed to the class</li></ul><h2 id="overriding-the-entrypoint" tabindex="-1"><a class="header-anchor" href="#overriding-the-entrypoint" aria-hidden="true">#</a> Overriding the Entrypoint</h2><p>It may be necessary, from time to time, to override the initial command/entrypoint of a container image. Generally this is used for troubleshooting purposes, or to override a vendor provided image.</p><ul><li>From the Web Console, navigate to the <code>rocketchat-[username]</code> deploymentconfig and click on <code>YAML</code> tab <ul><li>If you wish to perform this from the cli with the <code>oc</code> tool, type <code>oc edit deployment/rocketchat-[username]</code></li></ul></li><li>Add the following section of code under <code>spec: -&gt; template: -&gt; spec: -&gt; containers</code></li></ul><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>          <span class="token key atrule">command</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c=$(curl -X POST -H &#39;Content-Type: application/json&#39; --data &#39;{\\&quot;text\\&quot;: \\&quot;&#39;\\&quot;$HOSTNAME\\&quot;&#39; is AN OVERRIDING COMMAND! \\&quot;}&#39; https://chat.pathfinder.gov.bc.ca/hooks/xxx/xxx)&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>Take note of the pattern that will happen in the rocketchat notification screen</li><li>Remove the previous command to enable the rocketchat instance to start properly again</li></ul><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2><ul><li>https://blog.openshift.com/kubernetes-pods-life/</li></ul>', 26);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var _15_pod_lifecycle_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _15_pod_lifecycle_html as default };
