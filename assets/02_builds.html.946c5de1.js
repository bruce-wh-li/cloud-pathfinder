import { r as resolveComponent, o as openBlock, a as createElementBlock, b as createBaseVNode, d as createVNode, F as Fragment, c as createStaticVNode, e as createTextVNode } from "./app.32c85e0d.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.21dcd24c.js";
var _imports_0 = "/cloud-pathfinder/assets/01_builds.8eb0cbe3.png";
var _imports_1 = "/cloud-pathfinder/assets/01_build_logs.2a97211f.png";
var _imports_2 = "/cloud-pathfinder/assets/01_build_logs_02.3cd72f8d.png";
var _imports_3 = "/cloud-pathfinder/assets/01_build_logs_03.34e693e1.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="builds" tabindex="-1"><a class="header-anchor" href="#builds" aria-hidden="true">#</a> Builds</h1><p>In this lab, you will create a simple Docker based build for the Rocket Chat application.</p><h2 id="the-tools-project" tabindex="-1"><a class="header-anchor" href="#the-tools-project" aria-hidden="true">#</a> The Tools Project</h2><p>The tools project is what will hold various support tools for the application. In this case, all builds will run in this project.</p><h2 id="creating-a-docker-based-build" tabindex="-1"><a class="header-anchor" href="#creating-a-docker-based-build" aria-hidden="true">#</a> Creating a Docker-Based Build</h2>', 5);
const _hoisted_6 = /* @__PURE__ */ createTextVNode("The Rocket.Chat application build will be based off a minimal Dockerfile in a ");
const _hoisted_7 = {
  href: "https://github.com/BCDevOps/devops-platform-workshops-labs/tree/master/apps/rocketchat",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_8 = /* @__PURE__ */ createTextVNode("public repository");
const _hoisted_9 = /* @__PURE__ */ createTextVNode(". Leveraging the commandline, you can use the ");
const _hoisted_10 = /* @__PURE__ */ createBaseVNode("code", null, "oc new-build", -1);
const _hoisted_11 = /* @__PURE__ */ createTextVNode(" command to create all of the necessary OpenShift build components.");
const _hoisted_12 = /* @__PURE__ */ createStaticVNode('<p>Ensure that all team members have edit rights into the project. Once complete, each member can create their own Rocket.Chat docker build.</p><ul><li>To start, switch to the <strong>Tools Project</strong></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc project <span class="token punctuation">[</span>-tools<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>With the <code>oc</code> cli, create the build</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-tools<span class="token punctuation">]</span> new-build https://github.com/BCDevOps/devops-platform-workshops-labs/ --context-dir<span class="token operator">=</span>apps/rocketchat --name<span class="token operator">=</span>rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>The output of the previous command should be similar to the following:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\n--<span class="token operator">&gt;</span> Found image 8431f8b <span class="token punctuation">(</span><span class="token number">21</span> hours old<span class="token punctuation">)</span> <span class="token keyword">in</span> image stream <span class="token string">&quot;ocp101a-tools/rocketchat&quot;</span> under tag <span class="token string">&quot;latest&quot;</span> <span class="token keyword">for</span> <span class="token string">&quot;rocketchat&quot;</span>\n\n    Node.js <span class="token number">8</span> \n    --------- \n    Node.js <span class="token number">8</span> available as container is a base platform <span class="token keyword">for</span> building and running various Node.js <span class="token number">8</span> applications and frameworks. Node.js is a platform built on Chrome<span class="token string">&#39;s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.\n\n    Tags: builder, nodejs, nodejs8\n\n    * A Docker build using source code from https://github.com/BCDevOps/devops-platform-workshops-labs/ will be created\n      * The resulting image will be pushed to image stream &quot;rocketchat-[username]:latest&quot;\n      * Use &#39;</span>start-build<span class="token string">&#39; to trigger a new build\n\n--&gt; Creating resources with label build=rocketchat-[username] ...\n    imagestream &quot;rocketchat-[username]&quot; created\n    buildconfig &quot;rocketchat-[username]&quot; created\n--&gt; Success\n    Build configuration &quot;rocketchat-[username]&quot; created and build triggered.\n    Run &#39;</span>oc logs -f bc/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>&#39; to stream the build progress.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>The build will take between a couple of minutes to about 15 minutes</li></ul><div class="language-oc ext-oc line-numbers-mode"><pre class="language-oc"><code># Watch and wait for build\noc -n [-tools] logs -f bc/rocketchat-[username]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>You can now explore the Web Console to watch the build status from <code>Builds</code><em>note</em> you will see multiple builds from each team member</li></ul><p><img src="' + _imports_0 + '" alt=""></p><ul><li>Or this can be done on the CLI</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-tools<span class="token punctuation">]</span> get <span class="token function">bc</span>\noc -n <span class="token punctuation">[</span>-tools<span class="token punctuation">]</span> status\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>The build status can be monitored from the Web Console by selecting the <code>Logs</code> link</li></ul><p><img src="' + _imports_1 + '" alt=""><img src="' + _imports_2 + '" alt=""><img src="' + _imports_3 + '" alt=""></p>', 15);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock(Fragment, null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      _hoisted_6,
      createBaseVNode("a", _hoisted_7, [
        _hoisted_8,
        createVNode(_component_ExternalLinkIcon)
      ]),
      _hoisted_9,
      _hoisted_10,
      _hoisted_11
    ]),
    _hoisted_12
  ], 64);
}
var _02_builds_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _02_builds_html as default };
