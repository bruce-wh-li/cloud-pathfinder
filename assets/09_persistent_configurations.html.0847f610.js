import { c as createStaticVNode } from "./app.32c85e0d.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.21dcd24c.js";
var _imports_0 = "/cloud-pathfinder/assets/07_persistent_config_01.38461ded.png";
var _imports_1 = "/cloud-pathfinder/assets/07_persistent_config_02.0795b339.png";
var _imports_2 = "/cloud-pathfinder/assets/07_persistent_config_04.367d2e74.png";
var _imports_3 = "/cloud-pathfinder/assets/07_persistent_config_03.4b9ec4e9.png";
var _imports_4 = "/cloud-pathfinder/assets/07_persistent_config_05.08dba9ea.png";
var _imports_5 = "/cloud-pathfinder/assets/07_persistent_config_06.b0d255bb.png";
var _imports_6 = "/cloud-pathfinder/assets/07_persistent_config_07.f9037c1e.png";
var _imports_7 = "/cloud-pathfinder/assets/07_persistent_config_08.9d6a1c0e.png";
var _imports_8 = "/cloud-pathfinder/assets/07_persistent_config_09.e34819b5.png";
var _imports_9 = "/cloud-pathfinder/assets/07_persistent_config_10.f8170398.png";
var _imports_10 = "/cloud-pathfinder/assets/07_persistent_config_11.46a1d679.png";
var _imports_11 = "/cloud-pathfinder/assets/07_persistent_config_12.43a97a52.png";
var _imports_12 = "/cloud-pathfinder/assets/07_persistent_config_13.d607f48e.png";
var _imports_13 = "/cloud-pathfinder/assets/07_persistent_config_14.b1eb6fe2.png";
var _imports_14 = "/cloud-pathfinder/assets/07_persistent_config_15.3aef90e5.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="persistent-configurations" tabindex="-1"><a class="header-anchor" href="#persistent-configurations" aria-hidden="true">#</a> Persistent Configurations</h1><p>In cases where configurations need to change frequently or common configurations should be shared across deployments or pods, it is not ideal to build said configurations into the container image or maintain multiple copies of the configuration. OpenShift supports <code>configMaps</code> which can be a standalone object that is easily mounted into pods. In cases where the configuration file or data is sensitive in nature, OpenShift supports <code>secrets</code> to handle this sensitive data.</p><h3 id="configmaps" tabindex="-1"><a class="header-anchor" href="#configmaps" aria-hidden="true">#</a> ConfigMaps</h3><h4 id="creating-a-config-map-and-adding-it-to-a-deployment" tabindex="-1"><a class="header-anchor" href="#creating-a-config-map-and-adding-it-to-a-deployment" aria-hidden="true">#</a> Creating a Config Map and Adding it to a Deployment</h4><p>Create a configMap with arbitrary data and mount it inside of your <code>rocketchat-[username]</code> pod:</p><p><img src="' + _imports_0 + '" alt=""><img src="' + _imports_1 + '" alt=""></p><ul><li>In the Web Console, go to <code>+Add</code> and select <code>YAML</code></li><li>Paste in the following ConfigMap Code and save</li></ul><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1\n<span class="token key atrule">data</span><span class="token punctuation">:</span>\n  <span class="token key atrule">myfile.txt</span><span class="token punctuation">:</span> Hello world\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> rocketchat<span class="token punctuation">-</span><span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">-</span>configmap\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><p>Attach the <code>configMap</code> to your <code>rocketchat-[username]</code> deployment by navigating to the <code>YAML</code> tab in your Rocket Chat DeploymentConfig and pasting in the following code</p><ol><li>You will first need to create a <code>volume</code>. This is located under <code>.spec.template.spec.volumes</code></li></ol><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>  <span class="token punctuation">-</span> <span class="token key atrule">configMap</span><span class="token punctuation">:</span>\n      <span class="token key atrule">name</span><span class="token punctuation">:</span> rocketchat<span class="token punctuation">-</span><span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">-</span>configmap\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> rocketchat<span class="token punctuation">-</span><span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">-</span>volume\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>Then create a <code>volumeMount</code> under <code>.spec.template.spec.containers.volumeMounts</code></li></ol><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> rocketchat<span class="token punctuation">-</span><span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">-</span>volume\n    <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /opt/configs\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><blockquote><p>pro tip: if you are not sure what fields are available you can always use oc explain! <code>oc explain deployment.spec.template.spec.containers.volumeMounts</code></p></blockquote><p><img src="' + _imports_2 + '" alt=""><img src="' + _imports_3 + '" alt=""></p><blockquote><p>it should like similar to this <img src="' + _imports_4 + '" alt=""></p></blockquote><ul><li><p>Save the changes which will trigger a new deployment of your <code>rocketchat-[username]</code> pod</p></li><li><p>Using the pod terminal in the Web Console or <code>oc rsh</code>, explore the path of the mounted configMap</p></li></ul><p><img src="' + _imports_5 + '" alt=""></p><h4 id="changing-config-map-content" tabindex="-1"><a class="header-anchor" href="#changing-config-map-content" aria-hidden="true">#</a> Changing Config Map Content</h4><p>The content in your <code>configMap</code> can be changed and in most cases it&#39;s NOT dynamically updated in the pod. With that said, a new deployment will be required for the changes to be picked up.</p><ul><li>Edit your <code>configMap</code> to add a new key-value pair that represents another file</li></ul><p>Navigate to <code>Administrator View -&gt; Workloads -&gt; Configmaps</code> from the console and select your ConfigMap from the list</p><p><img src="' + _imports_5 + '" alt=""><img src="' + _imports_6 + '" alt=""></p><ul><li>Using the pod terminal in the Web Console or <code>oc rsh</code>, explore the path of the mounted configMap</li></ul><p><img src="' + _imports_7 + '" alt=""></p><h3 id="secrets" tabindex="-1"><a class="header-anchor" href="#secrets" aria-hidden="true">#</a> Secrets</h3><p>Secrets can be added in a similar way as config maps but are geared towards the management of sensitive information. In OpenShift, these are base64 encoded, and encrypted on disk when stored in the cluster. In Pods, they never live on disk (unlike configmaps) and are only in memory. Secrets, from the Web Console, are focused on supporting:</p><ul><li>Username/Passwords</li><li>SSH Keys</li><li>SSL Certificates</li><li>Git config files</li></ul><p>&quot;Opaque&quot; secrets are supported and can contain any type of data, however, these must be configured on the command line with the <code>oc</code> cli.</p><h3 id="creating-secrets" tabindex="-1"><a class="header-anchor" href="#creating-secrets" aria-hidden="true">#</a> Creating Secrets</h3><ul><li>In the Web Console, go to <code>+Add</code> and select <code>YAML</code></li><li>Paste in the following Secret Code and save</li></ul><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1\n<span class="token key atrule">stringData</span><span class="token punctuation">:</span>\n  <span class="token key atrule">SECRET_API_KEY</span><span class="token punctuation">:</span> <span class="token string">&quot;I&#39;m ULTRA SECRET&quot;</span>\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> rocketchat<span class="token punctuation">-</span><span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">-</span>secret\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="' + _imports_8 + '" alt=""></p><ul><li>Explore the other mongo secrets to see different variations of secret data by navigating to <code>Administrator View -&gt; Workloads -&gt; Secrets</code></li></ul><p><img src="' + _imports_9 + '" alt=""><img src="' + _imports_10 + '" alt=""></p><ul><li><p>Navigate back to your <code>rocketchat-[username]-secret</code> and attach the <code>secret</code> to your <code>rocketchat-[username]</code> DeploymentConfig by navigating to the <code>Add Secret to Workload</code></p></li><li><p>Attach the secret as an environment variable</p></li></ul><p><img src="' + _imports_11 + '" alt=""><img src="' + _imports_12 + '" alt=""></p><ul><li><p>This change will trigger a new deployment of your <code>rocketchat-[username]</code> pod</p></li><li><p>Once the pods have been redeployed the environment variable should be available for them to use. This is a very common pattern that applications can use to hold sensitive information like api keys in memory. You can verify that the environment variable exists by accessing the pod terminal or using <code>oc rsh</code> and outputting its value with a simple <code>echo $SECRET_API_KEY</code></p></li><li><p>From the cli, review the secret with <code>oc describe secret rocketchat-[username]-secret</code></p></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc describe secret rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-secret\nName:         rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-secret\nNamespace:    <span class="token punctuation">[</span>namespace<span class="token punctuation">]</span>\nLabels:       <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>\nAnnotations:  <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>\n\nType:  Opaque\n\nData\n<span class="token operator">==</span><span class="token operator">==</span>\nSECRET_API_KEY:  <span class="token number">16</span> bytes\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>Export the secret to view the contents with <code>oc get --export secret rocketchat-[username]-secret -o yaml</code></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc get --export secret rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-secret -o yaml\napiVersion: v1\ndata:\n  SECRET_API_KEY: <span class="token assign-left variable">SSdtIFVMVFJBIFNFQ1JFVA</span><span class="token operator">==</span>\nkind: Secret\nmetadata:\n  creationTimestamp: null\n  name: rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-secret\n  selfLink: /api/v1/namespaces/<span class="token punctuation">[</span>namespace<span class="token punctuation">]</span>/secrets/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>-secret\ntype: Opaque\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>on Mac&#39;s and Linux machines that have the base64 binary, you can decode the value as a reference</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;c2hlYXN0ZXdhcnQ=&quot;</span> <span class="token operator">|</span> base64 -d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>To edit an existing secret, from the webconsole you can navigate to the secret and select the <code>YAML</code> tab or <code>oc edit secret rocketchat-[username]-secret</code> from the cli. Secrets are base64 encoded. If adding new values or editing existing values of a Secret it is often easier to edit in plain text and have it b64 encoded for you. To do this you will need to modify the <code>data</code> field and change it to <code>stringData</code> prior to adding or editing values.</p></li><li><p>Add another secret value but this time as a sensitive configuration file such as an ssh key</p></li></ul><p>From the web console <img src="' + _imports_13 + '" alt=""> With <code>oc edit</code><img src="' + _imports_14 + '" alt=""></p><blockquote><p>take note that you were adding a new value <code>id_rsa</code> under a field called <code>stringData</code>. Openshift will automatically, encode that as base64 and place it in the <code>data</code> field upon saving. You can confirm this with <code>oc get secret rocketchat-[username]-secret -o yaml</code> after saving.</p></blockquote><ul><li>Redeploy the application after secret changes</li></ul>', 43);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var _09_persistent_configurations_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _09_persistent_configurations_html as default };
