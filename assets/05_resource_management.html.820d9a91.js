import { c as createStaticVNode } from "./app.32c85e0d.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.21dcd24c.js";
var _imports_0 = "/cloud-pathfinder/assets/11_resources_01.087add1d.png";
var _imports_1 = "/cloud-pathfinder/assets/11_resources_02.cc1fe457.png";
var _imports_2 = "/cloud-pathfinder/assets/11_resources_03.3d6b182d.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="resource-requests-and-limits" tabindex="-1"><a class="header-anchor" href="#resource-requests-and-limits" aria-hidden="true">#</a> Resource Requests and Limits</h1><p>Tuning the resources assigned to a pod will have a direct effect on the performance of the application.</p><p>Many templates include reasonable CPU and Memory resource configurations, however, new apps simply are deployed with the platform default.</p><blockquote><p>Platform Resource Request defaults are maintained by platform services. It is a measurement based on the average cpu/memory utilization and serves as a great starting point for your pods horsepower</p></blockquote><h2 id="explore-default-resource-configurations" tabindex="-1"><a class="header-anchor" href="#explore-default-resource-configurations" aria-hidden="true">#</a> Explore Default Resource Configurations</h2><p>Since the Rocket Chat application was built from scratch and not deployed from a template, explore the current resources allocated to the pods:</p><ul><li>Navigate to your rocketchat deploymentconfig and select <code>Yaml</code></li><li>Take a look a the resources spec under <code>.spec.template.spec.containers.resources</code> it should be <code>{}</code>. This identifies that it is using the default resource allocation.</li></ul><p><img src="' + _imports_0 + '" alt=""></p><ul><li>Review the current metrics of your <code>rocketchat-[username]</code> pod by navigating to it from the DeploymentConfig and then selecting <code>Pods</code></li></ul><p><img src="' + _imports_1 + '" alt=""><img src="' + _imports_2 + '" alt=""></p><ul><li><p>Reduce the CPU (request and limit) to <code>65 millicores</code> and Memory (request and limits) to <code>100 Megabytes</code> and monitor the startup time of the pod</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> <span class="token builtin class-name">set</span> resources deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --requests<span class="token operator">=</span>cpu<span class="token operator">=</span>65m,memory<span class="token operator">=</span>100Mi --limits<span class="token operator">=</span>cpu<span class="token operator">=</span>65m,memory<span class="token operator">=</span>100Mi\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Monitor the startup events of your pod and measure the time it takes to start</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Restart deployment; and observe</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout restart deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n\n<span class="token comment"># Wait for deployment to finish</span>\n<span class="token function">time</span> oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout restart deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>you may notice your pod starts to crash loop. This is most likely because the <code>liveness</code> probe you added from an earlier lab is timing out. This is an important consideration when deciding to tune pod resources. It is always a balance.</p></blockquote></li><li><p>Remove the limits previously imposed, and set your pod to <code>1 core</code> (or <code>1000 millicores</code>) for the request and limit</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> <span class="token builtin class-name">set</span> resources deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --requests<span class="token operator">=</span>cpu<span class="token operator">=</span>1000m,memory<span class="token operator">=</span>512Mi --limits<span class="token operator">=</span>cpu<span class="token operator">=</span>1000m,memory<span class="token operator">=</span>1024Mi\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Monitor the status and speed of the new deployment</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Start new deployment; and</span>\noc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout restart deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n\n<span class="token comment"># Wait for deployment to finish</span>\n<span class="token function">time</span> oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> rollout restart deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h2 id="sharing-resources" tabindex="-1"><a class="header-anchor" href="#sharing-resources" aria-hidden="true">#</a> Sharing Resources</h2><p>If there are many team members (and therefor workloads) working together in the same namespace there is a chance that requesting 1 core of cpu and 1 core of memory will not work. Why could that be?</p><ul><li>Reset resources utilization to something more appropriate</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> <span class="token builtin class-name">set</span> resources deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --requests<span class="token operator">=</span>cpu<span class="token operator">=</span>150m,memory<span class="token operator">=</span>256Mi --limits<span class="token operator">=</span>cpu<span class="token operator">=</span>200m,memory<span class="token operator">=</span>400Mi\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="troubleshooting-oom" tabindex="-1"><a class="header-anchor" href="#troubleshooting-oom" aria-hidden="true">#</a> Troubleshooting OOM</h2><p>The dreaded <code>OOM</code> or Out of Memory is when your pods are utilizing less memory than is required for the containers inside of the pod to work. Often there are <strong>no logs</strong> visible during these issues. Often the symptoms of OOM are <code>CrashLoop Back off</code> failure events as well as <code>rollout</code> failures. These can be investigated in the <code>Events</code> panel. To resolve this you can first increase memory utilization. After that you should investigate if the memory utilization fix is a band-aid or not. In other words, is the application consuming more memory than it should.</p>', 17);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var _05_resource_management_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _05_resource_management_html as default };
