import { c as createStaticVNode } from "./app.32c85e0d.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.21dcd24c.js";
var _imports_0 = "/cloud-pathfinder/assets/05_autoscaling_02.3c338d88.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="autoscaling" tabindex="-1"><a class="header-anchor" href="#autoscaling" aria-hidden="true">#</a> Autoscaling</h1><p>Autoscaling can be configured on pods to enable OpenShift to add or remove pods as load varies. In general, the Horizonal Pod Autoscaler sets: - Upper limit of pods - Lower limit of pods - Metric threshold to use for scaling tasks</p><p>Currently CPU and memory metrics are supported, with additional arbitrary metrics support intended for the future.</p><h3 id="autoscaling-pods" tabindex="-1"><a class="header-anchor" href="#autoscaling-pods" aria-hidden="true">#</a> Autoscaling Pods</h3><p>This lab will provide a simple demonstration of autoscaling based on CPU, as this is configurable in the Web Console.</p><ul><li>First take some time to discover the configurable fields that belong to a HorizontalPodAutoscaler <code>oc explain HorizontalPodAutoscaler</code></li><li>from the cli run</li></ul><blockquote><p>You are configuring a very low CPU request target (such as 10%) so that you can test it easily by browsing the web application. In production the target would be closer to 70-80%</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> autoscale deployment/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span> --min <span class="token number">1</span> --max <span class="token number">10</span> --cpu-percent<span class="token operator">=</span><span class="token number">10</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>Browse to the application to generate some load and monitor the behavior of the pods</p></li><li><p>Generate some activity such as creating messages, channels, etc.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># update the URL below and grab a new integration URL</span>\n<span class="token comment"># Open RocketChat, go to Adminstration &gt; Integrations &gt;  New Integration &gt; Incoming WebHook</span>\n<span class="token comment">#    Set &quot;Enabled&quot; to &quot;true&quot;</span>\n<span class="token comment">#    Set &quot;Post to Channel&quot;  to &quot;#general&quot;</span>\n<span class="token comment">#    Set &quot;Post as&quot;  as &quot;rocket.cat&quot;</span>\n<span class="token comment">#    Click on &quot;Save Changes&quot; at the bottom</span>\n<span class="token comment">#    Copy &quot;Webhook URL&quot; (see &quot;COPY TO CLIPBOARD&quot; button/link)</span>\n<span class="token comment">#    Replace &quot;https://rocketchat-[username]-[-dev].pathfinder.gov.bc.ca/hooks/&lt;integration&gt;/&lt;token&gt;&quot; with the real roken.</span>\n<span class="token comment">#    Make sure the domain matches the exposed route (no &quot;localhost:3000&quot;)!!!</span>\n<span class="token builtin class-name">printf</span> <span class="token string">&#39;{&quot;text&quot;:&quot;Example message&quot;,&quot;attachments&quot;:[{&quot;title&quot;:&quot;Rocket.Chat&quot;,&quot;title_link&quot;:&quot;https://rocket.chat&quot;,&quot;text&quot;:&quot;Rocket.Chat, the best open source chat&quot;,&quot;image_url&quot;:&quot;https://rocket.chat/images/mockup.png&quot;,&quot;color&quot;:&quot;#764FA5&quot;}]}&#39;</span> <span class="token operator">&gt;</span> /tmp/rocketchat-post-msg.json <span class="token operator">&amp;&amp;</span> ab -p /tmp/rocketchat-post-msg.json -n <span class="token number">10000</span> -c <span class="token number">10</span> -T <span class="token string">&quot;application/json&quot;</span> <span class="token punctuation">[</span>http://rocketchat-patricksimonian-ocp101-june-dev.apps.training-us.clearwater.devops.gov.bc.ca<span class="token punctuation">]</span>/hooks/<span class="token operator">&lt;</span>integration<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>token<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>Review the deployment config and try to add or remove replicas</p></li></ul><p><img src="' + _imports_0 + '" alt=""></p><ul><li>Remove the autoscaler<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc -n <span class="token punctuation">[</span>-dev<span class="token punctuation">]</span> delete hpa/rocketchat-<span class="token punctuation">[</span>username<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul>', 11);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var _07_autoscaling_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _07_autoscaling_html as default };
